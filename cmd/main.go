package main

import (
	"encoding/json"
	"fmt"
	"gihub.com/aabbuukkaarr8/TG-BOT-PRAYTIME/parse_api"
	rabbitmq "gihub.com/aabbuukkaarr8/TG-BOT-PRAYTIME/rabbitMQ"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var dailyStarts = make(map[int64]string)

func main() {
	rabbit, err := rabbitmq.New("amqp://guest:guest@localhost:5672/")
	if err != nil {
		log.Fatal("Failed to connect to RabbitMQ:", err)
	}
	defer rabbit.Close()

	bot, err := tgbotapi.NewBotAPI("8470796435:AAEHCu9VzGRjJ_DCPthocbF1KgLSicZ2dTE")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	go startPrayerWorker(rabbit, bot)

	for update := range updates {
		if update.Message.Text == "/start" {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			today := time.Now().Format("2006-01-02")

			// –ü–†–û–í–ï–†–Ø–ï–ú –ë–´–õ –õ–ò –£–ñ–ï /start –°–ï–ì–û–î–ù–Ø
			if dailyStarts[update.Message.Chat.ID] == today {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è"))
				continue
			}

			// –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–¢–£ –ó–ê–ü–£–°–ö–ê
			dailyStarts[update.Message.Chat.ID] = today
			go parse_api.SchedulePrayerNotifications(rabbit, update.Message.Chat.ID)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ù–∞–º–∞–∑–∞—Ö!"))
		}

		// /times - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤
		if update.Message.Text == "/times" {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			times, err := parse_api.PrayerTimes()
			if err != nil {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–æ–≤"))
				continue
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			message := "üïå –í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –ò–Ω–≥—É—à–µ—Ç–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
			message += fmt.Sprintf("üåÖ –§–∞–¥–∂—Ä: %s\n", times["Fajr"])
			message += fmt.Sprintf("‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: %s\n", times["Sunrise"])
			message += fmt.Sprintf("üèôÔ∏è –ó—É—Ö—Ä: %s\n", times["Dhuhr"])
			message += fmt.Sprintf("üåá –ê—Å—Ä: %s\n", times["Asr"])
			message += fmt.Sprintf("üåÜ –ú–∞–≥—Ä–∏–±: %s\n", times["Maghrib"])
			message += fmt.Sprintf("üåÉ –ò—à–∞: %s\n", times["Isha"])

			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, message))
		}
	}
}

func startPrayerWorker(rabbit *rabbitmq.Client, bot *tgbotapi.BotAPI) {
	messages, _ := rabbit.ConsumePrayerNotifications()

	for msg := range messages {
		var notification rabbitmq.PrayerNotification
		json.Unmarshal(msg.Body, &notification)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
		if time.Now().Before(notification.ScheduledAt) {
			msg.Nack(false, true)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		sendPrayerNotification(notification, bot)
		msg.Ack(false)
	}
}

func sendPrayerNotification(notification rabbitmq.PrayerNotification, bot *tgbotapi.BotAPI) {
	message := fmt.Sprintf("‚è∞ –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–∏—Ç—å %s –Ω–∞–º–∞–∑! '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ç–µ—Ä–ø–µ–Ω–∏—é –∏ –Ω–∞–º–∞–∑—É' 2:45",
		notification.PrayerName)
	bot.Send(tgbotapi.NewMessage(notification.ChatID, message))
}
